[
  describe('GET /users/:id/tweets', () => {
    before(async() => {
      // 清除測試資料庫資料
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', null, { raw: true });
      await db.User.destroy({where: {},truncate: true, force: true})
      await db.Tweet.destroy({where: {},truncate: true, force: true})
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', null, { raw: true });
      // 模擬登入資料
      const rootUser = await db.User.create({name: 'root'});this.authenticate =  sinon.stub(passport,"authenticate").callsFake((strategy, options, callback) => {            
        callback(null, {...rootUser}, null);
        return (req,res,next)=>{};
      });
      this.getUser = sinon.stub(
          helpers, 'getUser'
      ).returns({id: 1, Followings: [], role: 'user'});
      // 在測試資料庫中，新增 mock 資料
      await db.User.create({account: 'User1', name: 'User1', email: 'User1', password: 'User1'})
      await db.Tweet.create({UserId: 1, description: 'User1 的 Tweet1'})
    })

    // GET /users/:id/tweets - 看見某使用者發過的推文
    it(' - self successfully', (done) => {
      request(app)
        .get('/api/users/1/tweets')
        .set('Accept', 'application/json')
        .expect(200)
        .end(function(err, res) {
          if (err) return done(err);

          expect(res.body).to.be.an('array');
          // 有回傳某使用者的推文資料
          res.body[0].description.should.equal('User1 的 Tweet1');

          return done();
        })
    });

    after(async () => {
      // 清除登入及測試資料庫資料
      this.authenticate.restore();
      this.getUser.restore();
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', null, { raw: true });
      await db.User.destroy({where: {},truncate: true, force: true})
      await db.Tweet.destroy({where: {},truncate: true, force: true})
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', null, { raw: true });
    })

  });

  describe('GET /users/:id/replied_tweets', () => {
    before(async() => {
      // 清除測試資料庫資料
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 0', null, { raw: true });
      await db.User.destroy({where: {},truncate: true, force: true})
      await db.Tweet.destroy({where: {},truncate: true, force: true})
      await db.Reply.destroy({where: {},truncate: true, force: true})
      await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1', null, { raw: true });
      // 模擬登入資料
      const rootUser = await db.User.create({name: 'root'});this.authenticate =  sinon.stub(passport,"authenticate").callsFake((strategy, options, callback) => {            
        callback(null, {...rootUser}, null);
        return (req,res,next)=>{};
      });
      this.getUser = sinon.stub(
          helpers, 'getUser'
      ).returns({id: 1, Followings: [], role: 'user'});
      // 在測試資料庫中，新增 mock 資料
      await db.User.create({account: 'User1', name: 'User1', email: 'User1', password: 'User1'})        
      await db.Tweet.create({UserId: 1, description: 'User1 的 Tweet1'})
      await db.Reply.create({UserId: 1, TweetId: 1, comment: 'Tweet1 的 comment'})
    })

]